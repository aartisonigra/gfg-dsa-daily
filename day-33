Given a sorted array arr[] that represents an Arithmetic Progression (AP) with exactly one missing element, find the missing number.

Note: An element will always exist that, upon inserting into a sequence forms Arithmetic progression. If the given sequence already forms a valid complete AP, return the (n+1)-th element that would come next in the sequence.

Examples:

Input: arr[] = [2, 4, 8, 10, 12, 14]
Output: 6
Explanation: Actual AP should be 2, 4, 6, 8, 10, 12, 14.
Input: arr[] = [1, 6, 11, 16, 21, 31]
Output: 26
Explanation: Actual AP should be 1, 6, 11, 16, 21, 26, 31.
Input: arr[] = [4, 7, 10, 13, 16]
Output: 19
Explanation: Since the sequence already forms a valid AP, the next element after 16 in the sequence would be 19. Therefore, the output is 19.

SOLUTIONS:

class Solution {
    public int findMissing(int[] arr) {
        int n = arr.length;
        // Step 1: Find the minimum common difference
        int d = Integer.MAX_VALUE;

        for (int i = 1; i < n; i++) {
            d = Math.min(d, arr[i] - arr[i - 1]);
        }

        // Step 2: Find where the difference is not equal to d
        for (int i = 1; i < n; i++) {
            if (arr[i] - arr[i - 1] != d) {
                return arr[i - 1] + d;
            }
        }

        // Step 3: If not found, return the next expected element
        return arr[n - 1] + d;
    }
}
