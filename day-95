You are given an array of strings arr[], where each arr[i] consists of lowercase english alphabets. You need to find the number of balanced strings in arr[] which can be formed by concatinating one or more contiguous strings of arr[].
A balanced string contains the equal number of vowels and consonants. 

Examples:

Input: arr[] = ["aeio", "aa", "bc", "ot", "cdbd"]
Output: 4
Explanation: arr[0..4], arr[1..2], arr[1..3], arr[3..3] are the balanced substrings with equal consonants and vowels.
Input: arr[] = ["ab", "be"]
Output: 3
Explanation: arr[0..0], arr[0..1], arr[1..1] are the balanced substrings with equal consonants and vowels.
Input: arr[] = ["tz", "gfg", "ae"]
Output: 0
Explanation: There is no such balanced substring present in arr[] with equal consonants and vowels.


SOLUTIONS:
  class Solution {
  public:
    int countBalanced(vector<string>& arr) {
        // code here
        vector<int>sample;
        unordered_map<int,int>omap;
        for(int i=0;i<arr.size();i++) {
            string temp=arr[i];
            int cntV=0;
            int cntC=0;
            for(int j=0;j<temp.length();j++) {
                if(temp.at(j)=='a'||temp.at(j)=='o'||temp.at(j)=='e'||temp.at(j)=='i'||temp.at(j)=='u') {
                    cntV++;
                } else {
                    cntC++;
                }
            }
            sample.push_back(cntV-cntC);
        }
        int count =0 ;
        int total=0;
        omap[0]=1;
        for(int i=0;i<sample.size();i++) {
            total+=sample[i];
            if(omap.find(total)!=omap.end()) {
                count+=omap[total];
            }
            omap[total]++;
        }
        
        return count;
    }
};
