PROBLEMAS:

You are given the head of a linked list. You have to replace all the values of the nodes with the nearest prime number. If more than one prime number exists at an equal distance, choose the smallest one. Return the head of the modified linked list.

Examples :

Input: head = 2 → 6 → 10
Output: 2 → 5 → 11

Explanation: The nearest prime of 2 is 2 itself. The nearest primes of 6 are 5 and 7, since 5 is smaller so, 5 will be chosen. The nearest prime of 10 is 11.
Input: head = 1 → 15 → 20
Output: 2 → 13 → 19

Explanation: The nearest prime of 1 is 2. The nearest primes of 15 are 13 and 17, since 13 is smaller so, 13 will be chosen. The nearest prime of 20 is 19.


SOLUTIONS:

class Solution {
  public:
   bool isPrime(int n) {
        if (n <= 1) return false;
        for (int i = 2; i <= sqrt(n); i++) {
            if (n % i == 0) return false;
        }
        return true;
    }

    // Function to find the nearest prime number to a given number
    int nearestPrime(int n) {
        if (isPrime(n)) return n;

        int left = n - 1, right = n + 1;
        
        // Loop until a prime number is found either to the left or right
        while (left >= 2 || right < 1000000) {
            if (left >= 2 && isPrime(left)) return left;
            if (isPrime(right)) return right;
            left--;
            right++;
        }
        
        return n; // in case no prime is found (though theoretically impossible)
    }

    // Function to replace node values with nearest prime numbers
    Node* primeList(Node* head) {
        Node* curr = head;
        
        while (curr != nullptr) {
            curr->val = nearestPrime(curr->val);  // Update value with nearest prime
            curr = curr->next;
        }
        return head;
    }
};
