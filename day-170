Given a non-empty integer array arr[]. Your task is to find and return the top k elements which have the highest frequency in the array.

Note: If two numbers have the same frequency, the larger number should be given the higher priority.

Examples:

Input: arr[] = [3, 1, 4, 4, 5, 2, 6, 1], k = 2
Output: [4, 1]
Explanation: Frequency of 4 is 2 and frequency of 1 is 2, these two have the maximum frequency and 4 is larger than 1.
Input: arr[] = [7, 10, 11, 5, 2, 5, 5, 7, 11, 8, 9], k = 4
Output: [5, 11, 7, 10]
Explanation: Frequency of 5 is 3, frequency of 11 is 2, frequency of 7 is 2, frequency of 10 is 

  SOLUTIONS:

class Solution {
    public ArrayList<Integer> topKFreq(int[] arr, int k) {
        // Code here
        Map<Integer, Integer> freq = new HashMap<>();
        for (int ele : arr) {
            freq.put(ele, freq.getOrDefault(ele, 0) + 1);
        }
        List<Map.Entry<Integer, Integer>> entryList = new ArrayList<>(freq.entrySet());
        entryList.sort((a, b) -> {
            if (a.getValue().equals(b.getValue())) {
              
                return b.getKey().compareTo(a.getKey());
            } else {
         
                return b.getValue().compareTo(a.getValue());
            }
        });

        ArrayList<Integer> res = new ArrayList<>();
        for (int i = 0; i < k && i < entryList.size(); i++) {
            res.add(entryList.get(i).getKey());
        }

        return res;
    }
}
