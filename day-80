You are given an integer n representing the number of digits in a number, and an array arr[] containing digits from 0 to 9. Your have to count how many n-digit positive integers can be formed such that at least one digit from the array arr[] appears in the number.

Examples:

Input: n = 1, arr[] = [1, 2, 3]
Output: 3
Explanation: Only the single-digit numbers [1, 2, 3] satisfy the condition.
Input: n = 2, arr[] = [3, 5]
Output: 34
Explanation: There are a total of 34  two digit numbers which contain atleast  one out of  [3, 5].


  SOLUTIONS:

  import java.util.*;

class Solution {
    public int countValid(int n, int[] arr) {
        Set<Integer> forbidden = new HashSet<>();
        for (int digit : arr) {
            forbidden.add(digit);
        }

        // Allowed digits = 0-9 \ forbidden digits
        List<Integer> allowedDigits = new ArrayList<>();
        for (int i = 0; i <= 9; i++) {
            if (!forbidden.contains(i)) {
                allowedDigits.add(i);
            }
        }

        int total = (int)Math.pow(10, n) - (int)Math.pow(10, n - 1);

        // If no allowed digits, then all numbers are valid (i.e., 0 bad numbers)
        if (allowedDigits.size() == 0) return total;

        // Count bad numbers (which have no digit from arr[])
        int bad = 0;
        int size = allowedDigits.size();

        // leading digit should not be zero
        for (int d : allowedDigits) {
            if (d == 0) continue;
            int count = 1;
            for (int i = 1; i < n; i++) {
                count *= size;
            }
            bad += count;
        }

        return total - bad;
    }
}
