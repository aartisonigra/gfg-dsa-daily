Given an array arr[] of time strings in 24-hour clock format "HH:MM:SS", return the minimum difference in seconds between any two time strings in the arr[].
The clock wraps around at midnight, so the time difference between "23:59:59" and "00:00:00" is 1 second.

Examples:

Input: arr[] = ["12:30:15", "12:30:45"]
Output: 30
Explanation: The minimum time difference is 30 seconds.
Input: arr[] = ["00:00:01", "23:59:59", "00:00:05"]
Output: 2
Explanation: The time difference is minimum between "00:00:01" and "23:59:59".


  SOLTUIONS:

import java.util.Arrays;

class Solution {
    public int minDifference(String[] arr) {
        int n = arr.length;
        int[] seconds = new int[n];

        // Convert all time strings to seconds
        for (int i = 0; i < n; i++) {
            seconds[i] = toSeconds(arr[i]);
        }

        // Sort the times
        Arrays.sort(seconds);

        int minDiff = Integer.MAX_VALUE;

        // Compare consecutive times
        for (int i = 1; i < n; i++) {
            int diff = seconds[i] - seconds[i - 1];
            minDiff = Math.min(minDiff, diff);
        }

        // Check circular difference (wrap-around)
        int circularDiff = 86400 - seconds[n - 1] + seconds[0];  // 86400 seconds in a day
        minDiff = Math.min(minDiff, circularDiff);

        return minDiff;
    }

    private int toSeconds(String time) {
        String[] parts = time.split(":");
        int h = Integer.parseInt(parts[0]);
        int m = Integer.parseInt(parts[1]);
        int s = Integer.parseInt(parts[2]);
        return h * 3600 + m * 60 + s;
    }
}
