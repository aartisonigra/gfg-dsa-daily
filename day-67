You are given an array arr[] of positive integers and an integer k, find the number of subarrays in arr[] where the count of distinct integers is at most k.

Note: A subarray is a contiguous part of an array.

Examples:

Input: arr[] = [1, 2, 2, 3], k = 2
Output: 9
Explanation: Subarrays with at most 2 distinct elements are: [1], [2], [2], [3], [1, 2], [2, 2], [2, 3], [1, 2, 2] and [2, 2, 3].
Input: arr[] = [1, 1, 1], k = 1
Output: 6
Explanation: Subarrays with at most 1 distinct element are: [1], [1], [1], [1, 1], [1, 1] and [1, 1, 1].
Input: arr[] = [1, 2, 1, 1, 3, 3, 4, 2, 1], k = 2
Output: 24
Explanation: There are 24 subarrays with at most 2 distinct elements.


SOLUITONS:
import java.util.*;

class Solution {
    public int countAtMostK(int[] arr, int k) {
        int n = arr.length;
        int left = 0, right = 0;
        int count = 0;
        Map<Integer, Integer> freqMap = new HashMap<>();

        for (right = 0; right < n; right++) {
            int current = arr[right];
            freqMap.put(current, freqMap.getOrDefault(current, 0) + 1);

            // If more than k distinct, move left pointer
            while (freqMap.size() > k) {
                int leftVal = arr[left];
                freqMap.put(leftVal, freqMap.get(leftVal) - 1);
                if (freqMap.get(leftVal) == 0) {
                    freqMap.remove(leftVal);
                }
                left++;
            }

            // Add subarrays ending at right and starting from left
            count += (right - left + 1);
        }

        return count;
    }
}

  
