You are given a lowercase string s, determine the total number of distinct strings that can be formed using the following rules:

Identify all unique vowels (a, e, i, o, u) present in the string.
For each distinct vowel, choose exactly one of its occurrences from s. If a vowel appears multiple times, each occurrence represents a unique selection choice.
Generate all possible permutations of the selected vowels. Each unique arrangement counts as a distinct string.
Return the total number of such distinct strings.

Examples:

Input: s = "aeiou"
Output: 120
Explanation: Each vowel appears once, so the number of different strings can form is 5! = 120.
Input: s = "ae"
Output: 2
Explanation: Pick a and e, make all orders → "ae", "ea".
Input: s = "aacidf"
Output: 4 
Explanation: Vowels in s are 'a' and 'i', Pick each 'a' once with a single 'i', make all orders → "ai", "ia", "ai", "ia".


  SOLUITONS:

import java.util.*;

class Solution {
    public int vowelCount(String s) {
        Set<Character> vowelsSet = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));
        Map<Character, Integer> freq = new HashMap<>();

        // Count frequency of each vowel in the string
        for (char c : s.toCharArray()) {
            if (vowelsSet.contains(c)) {
                freq.put(c, freq.getOrDefault(c, 0) + 1);
            }
        }

        int uniqueVowels = freq.size();
        if (uniqueVowels == 0) return 0;

        // Calculate product of choices (one occurrence for each vowel)
        int combinationChoices = 1;
        for (int count : freq.values()) {
            combinationChoices *= count;
        }

        // Calculate permutations of the selected vowels (factorial)
        int permutations = factorial(uniqueVowels);

        return combinationChoices * permutations;
    }

    private int factorial(int n) {
        int res = 1;
        for (int i = 2; i <= n; i++) {
            res *= i;
        }
        return res;
    }
}
