Given a string s, find the length of longest periodic proper prefix of s. If no such prefix exists, return -1.
A periodic proper prefix is a non empty prefix of s (but not the whole string), such that repeating this prefix enough times produces a string that starts with s.

Examples:

Input: s = "aaaaaa"
Output: 5
Explanation: Repeating the proper prefix "aaaaa" forms "aaaaaaaaaa...", which contains "aaaaa" as a prefix. No longer proper prefix satisfies this.
Input: s = "abcab"
Output: 3
Explanation: Repeating the proper prefix "abc" forms "abcabc., which contains "abcab" as a prefix. No longer proper prefix satisfies this.
Input: s = "ababd"
Output: -1
Explanation: No proper prefix satisfying the given condition.


SOLUTIONS:

class Solution {
    int getLongestPrefix(String s) {
        int n = s.length();

        for (int k = n - 1; k >= 1; k--) {
            boolean valid = true;
            for (int i = k; i < n; i++) {
                if (s.charAt(i) != s.charAt(i % k)) {
                    valid = false;
                    break;
                }
            }
            if (valid) {
                return k;
            }
        }
        
        return -1;
    }
}
