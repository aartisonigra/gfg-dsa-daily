You are given an array of strings arr[] that represents a valid arithmetic expression written in Reverse Polish Notation (Postfix Notation). Your task is to evaluate the expression and return an integer representing its value.

Note: A postfix expression is of the form operand1 operand2 operator (e.g., "a b +"). 
And the division operation between two integers always computes the floor value, i.e floor(5 / 3) = 1 and floor(-5 / 3) = -2.
It is guaranteed that the result of the expression and all intermediate calculations will fit in a 32-bit signed integer.

Examples:

Input: arr[] = ["2", "3", "1", "*", "+", "9", "-"]
Output: -4
Explanation: If the expression is converted into an infix expression, it will be 2 + (3 * 1) – 9 = 5 – 9 = -4.
Input: arr[] = ["2", "3", "^", "1", "+"]
Output: 9
Explanation: If the expression is converted into an infix expression, it will be 2 ^ 3 + 1 = 8 + 1 = 9.


SOLUTIONS:


import java.util.*;

class Solution {
    public int evaluatePostfix(String[] arr) {
        Stack<Integer> st = new Stack<>();

        for (String token : arr) {
            if (isNumber(token)) {
                st.push(Integer.parseInt(token));
            } else {
                int b = st.pop();  // ध्यान रहे: पहले b pop होगा
                int a = st.pop();  // फिर a pop होगा
                int result = 0;

                switch (token) {
                    case "+": result = a + b; break;
                    case "-": result = a - b; break;
                    case "*": result = a * b; break;
                    case "/": result = divide(a, b); break;
                    case "^": result = (int)Math.pow(a, b); break;
                }

                st.push(result);
            }
        }

        return st.pop();
    }

    // Helper: check if string is number
    private boolean isNumber(String s) {
        return !(s.equals("+") || s.equals("-") || s.equals("*") || s.equals("/") || s.equals("^"));
    }

    // Helper: floor division
    private int divide(int a, int b) {
        int result = a / b;
        if (a % b != 0 && ((a < 0) ^ (b < 0))) {
            result--;  // floor correction
        }
        return result;
    }
}
