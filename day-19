PROBELAMS:
Given an array arr[] containing 2*n + 2 positive numbers, out of which 2*n numbers exist in pairs whereas the other two number occur exactly once and are distinct. Find the other two numbers. Return the answer in increasing order.

Examples:

Input: arr[] = [1, 2, 3, 2, 1, 4]
Output: [3, 4] 
Explanation: 3 and 4 occur exactly once.
Input: arr[] = [2, 1, 3, 2]
Output: [1, 3]
Explanation: 1 and 3 occur exactly once.
Input: arr[] = [2, 1, 3, 3]
Output: [1, 2]
Explanation: 1 and 2 occur exactly once.


SOLUTIONS:

class Solution {
    public int[] singleNum(int[] arr) {
        int xor = 0;
        for (int num : arr) {
            xor ^= num;
        }

        // Find rightmost set bit
        int set_bit = xor & -xor;

        int num1 = 0, num2 = 0;
        for (int num : arr) {
            if ((num & set_bit) != 0)
                num1 ^= num;
            else
                num2 ^= num;
        }

        // Return in increasing order
        if (num1 < num2)
            return new int[]{num1, num2};
        else
            return new int[]{num2, num1};
    }
}

