You are given an array arr[]. For each element at index i (0-based indexing), find the farthest index j to the right (i.e., j > i) such that arr[j] < arr[i]. If no such index exists for a given position, return -1 for that index. Return the resulting array of answers.

Examples:

Input: arr[] = [2, 5, 1, 3, 2]
Output: [2, 4, -1, 4, -1]
Explanation: arr[0] = 2: Farthest smaller element to the right is arr[2] = 1.
arr[1] = 5: Farthest smaller element to the right is arr[4] = 2.
arr[2] = 1: No smaller element to the right → -1.
arr[3] = 3: Farthest smaller element to the right is arr[4] = 2.
arr[4] = 2: No elements to the right → -1.
Input: arr[] = [2, 3, 5, 4, 1] 
Output: [4, 4, 4, 4, -1]
Explanation: arr[4] is the farthest smallest element to the right for arr[0], arr[1], arr[2] and arr[3].


  SOLUTIONS:

class Solution {
  public:
    vector<int> farMin(vector<int>& arr) {
        /* Example array 
        arr = [2, 5, 1, 3, 2]
        index = [0, 1, 2, 3, 4]    
                         
        Creating a suffix array

                 suffix = [] */
        
        int n = arr.size();
        vector<int> suffix(n);
        
        suffix[n-1] = arr[n-1];     
        //suffix = [ , , , ,2]
        
        for(int i = n-2; i >= 0; i--){
            if(arr[i] < suffix[i+1]){
                suffix[i] = arr[i];
                
                //suffix = [ , , , ,2]
            }
            else{
                suffix[i] = suffix[i+1];
                
                //suffix[] = [ , , , 2, 2]
            }
        }
        //suffix[] =[1, 1, 1, 2, 2]
        
        //Searching for farthest element using BINARY SEARCH
        vector<int> Ans;
        
        for(int i = 0; i < n; i++){
            int low = i+1;      //excluding the present element
            int high = n-1;
            int ans = -1;
            
            while(low<=high){
                int mid = (low+high)/2;
                
                if(suffix[mid] < arr[i]){
                    ans = mid;
                    low = mid + 1;
                }
                else{
                    high = mid -1;
                }
            }
            Ans.push_back(ans);
        }
        return Ans;
    }
};
