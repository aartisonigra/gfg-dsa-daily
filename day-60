Koko is given an array arr[], where each element represents a pile of bananas. She has exactly k hours to eat all the bananas.

Each hour, Koko can choose one pile and eat up to s bananas from it.

If the pile has atleast s bananas, she eats exactly s bananas.

If the pile has fewer than s bananas, she eats the entire pile in that hour.

Koko can only eat from one pile per hour.


Your task is to find the minimum value of s (bananas per hour) such that Koko can finish all the piles within k hours.

Examples:

Input: arr[] = [5, 10, 3], k = 4
Output: 5
Explanation: Koko eats at least 5 bananas per hour to finish all piles within 4 hours, as she can consume each pile in 1 + 2 + 1 = 4 hours.
Input: arr[] = [5, 10, 15, 20], k = 7
Output: 10
Explanation: At 10 bananas per hour, Koko finishes in 6 hours, just within the limit 7.


SOLTUIONS:
class Solution {
    public int kokoEat(int[] arr, int k) {
        int low = 1;
        int high = getMax(arr);  // max value in the array
        int ans = high;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (canEatAll(arr, k, mid)) {
                ans = mid;       // try to minimize s
                high = mid - 1;
            } else {
                low = mid + 1;   // need more eating speed
            }
        }

        return ans;
    }

    // Helper function to get max of array
    private int getMax(int[] arr) {
        int max = arr[0];
        for (int a : arr) {
            if (a > max) max = a;
        }
        return max;
    }

    // Check if Koko can eat all bananas at speed s in k hours
    private boolean canEatAll(int[] arr, int k, int s) {
        int hours = 0;
        for (int pile : arr) {
            // ceil(pile/s) = (pile + s - 1) / s
            hours += (pile + s - 1) / s;
        }
        return hours <= k;
    }
}

