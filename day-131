Given a board of dimensions n × m that needs to be cut into n*m squares. The cost of making a cut along a horizontal or vertical edge is provided in two arrays:

x[]: Cutting costs along the vertical edges (length-wise).
y[]: Cutting costs along the horizontal edges (width-wise).
Find the minimum total cost required to cut the board into squares optimally.

Examples:

Input: n = 4, m = 6, x[] = [2, 1, 3, 1, 4], y[] = [4, 1, 2]
Output: 42
Explanation:

Initially no. of horizontal segments = 1 & no. of vertical segments = 1.
Optimal way to cut into square is:
• Pick 4 (from x) -> vertical cut, Cost = 4 × horizontal segments = 4,
  Now, horizontal segments = 1, vertical segments = 2.
• Pick 4 (from y) -> horizontal cut, Cost = 4 × vertical segments = 8,
  Now, horizontal segments = 2, vertical segments = 2.
• Pick 3 (from x) -> vertical cut, Cost = 3 × horizontal segments = 6,
  Now, horizontal segments = 2, vertical segments = 3.
• Pick 2 (from x) -> vertical cut, Cost = 2 × horizontal segments = 4,
  Now, horizontal segments = 2, vertical segments = 4.
• Pick 2 (from y) -> horizontal cut, Cost = 2 × vertical segments = 8,
  Now, horizontal segments = 3, vertical segments = 4.
• Pick 1 (from x) -> vertical cut, Cost = 1 × horizontal segments = 3,
  Now, horizontal segments = 3, vertical segments = 5.
• Pick 1 (from x) -> vertical cut, Cost = 1 × horizontal segments = 3,
  Now, horizontal segments = 3, vertical segments = 6.
• Pick 1 (from y) -> horizontal cut, Cost = 1 × vertical segments = 6,
  Now, horizontal segments = 4, vertical segments = 6.
So, the total cost = 4 + 8 + 6 + 4 + 8 + 3 + 3 + 6 = 42.
Input: n = 4, m = 4, x[] = [1, 1, 1], y[] = [1, 1, 1]
Output: 15
Explanation: 

Initially no. of horizontal segments = 1 & no. of vertical segments = 1.
Optimal way to cut into square is: 
• Pick 1 (from y) -> horizontal cut, Cost = 1 × vertical segments = 1,
  Now, horizontal segments = 2, vertical segments = 1.
• Pick 1 (from y) -> horizontal cut, Cost = 1 × vertical segments = 1,
  Now, horizontal segments = 3, vertical segments = 1.
• Pick 1 (from y) -> horizontal cut, Cost = 1 × vertical segments = 1,
  Now, horizontal segments = 4, vertical segments = 1.
• Pick 1 (from x) -> vertical cut, Cost = 1 × horizontal segments = 4,
  Now, horizontal segments = 4, vertical segments = 2.
• Pick 1 (from x) -> vertical cut, Cost = 1 × horizontal segments = 4,
  Now, horizontal segments = 4, vertical segments = 3.
• Pick 1 (from x) -> vertical cut, Cost = 1 × horizontal segments = 4,
  Now, horizontal segments = 4, vertical segments = 4
So, the total cost = 1 + 1 + 1 + 4 + 4 + 4 = 15.


  SOLUTIONS;

import java.util.Arrays;
import java.util.Collections;

class Solution {
    public static int minCost(int n, int m, int[] x, int[] y) {
        // Sort in descending order
        Integer[] xDesc = Arrays.stream(x).boxed().toArray(Integer[]::new);
        Integer[] yDesc = Arrays.stream(y).boxed().toArray(Integer[]::new);
        
        Arrays.sort(xDesc, Collections.reverseOrder());
        Arrays.sort(yDesc, Collections.reverseOrder());
        
        int hz = 1;  // Horizontal segments
        int vt = 1;  // Vertical segments
        int i = 0, j = 0;
        long cost = 0;
        int mod = (int)1e9 + 7;  // Prevent overflow (optional)
        
        while (i < xDesc.length && j < yDesc.length) {
            if (xDesc[i] >= yDesc[j]) {
                // Vertical cut
                cost = (cost + (long)xDesc[i] * hz) % mod;
                vt++;
                i++;
            } else {
                // Horizontal cut
                cost = (cost + (long)yDesc[j] * vt) % mod;
                hz++;
                j++;
            }
        }
        
        // Process remaining cuts
        while (i < xDesc.length) {
            cost = (cost + (long)xDesc[i] * hz) % mod;
            i++;
        }
        
        while (j < yDesc.length) {
            cost = (cost + (long)yDesc[j] * vt) % mod;
            j++;
        }
        
        return (int) cost;
    }
}
