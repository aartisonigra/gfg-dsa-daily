You are given an undirected connected graph with V vertices numbered from 0 to V-1 and E edges, represented as a 2D array edges[][], where each element edges[i] = [u, v] represents an undirected edge between vertex u and vertex v.
Find the diameter of the graph.
The diameter of a graph (sometimes called the width) is the number of edges on the longest path between two vertices in the graph.

Note: Graph do not contains any cycle.

Examples :

Input: V = 6, E = 5, edges[][] = [[0, 1], [0, 4], [1, 3], [1, 2], [2, 5]]
    
Output: 4
Explanation: The longest path in the graph is from vertices 4 to vertices 5 (4 -> 0 -> 1 -> 2 -> 5).
Input: V = 7, E = 6, edges[][] = [[0, 2], [0, 4], [0, 3], [3, 1], [3, 5], [1, 6]]
    
Output: 4
Explanation: The longest path in the graph is from vertices 2 to vertices 6 (2 -> 0 -> 3 -> 1 -> 6).


  SOLUTIONS:


  import java.util.*;

class Solution {
    // Function to find the diameter of the graph
    public int diameter(int V, int[][] edges) {
        // Step 1: Build adjacency list
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());
        for (int[] e : edges) {
            adj.get(e[0]).add(e[1]);
            adj.get(e[1]).add(e[0]);
        }

        // Step 2: BFS from node 0 to find farthest node
        int farNode = bfsToFindFarthest(V, adj, 0)[0];

        // Step 3: BFS again from farthest node to find max distance
        int diameter = bfsToFindFarthest(V, adj, farNode)[1];

        return diameter;
    }

    // BFS helper: returns [farthestNode, maxDistance]
    private int[] bfsToFindFarthest(int V, List<List<Integer>> adj, int start) {
        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[V];
        q.offer(start);
        visited[start] = true;
        int farthest = start, distance = -1;

        while (!q.isEmpty()) {
            int size = q.size();
            distance++;
            for (int i = 0; i < size; i++) {
                int node = q.poll();
                farthest = node;
                for (int nei : adj.get(node)) {
                    if (!visited[nei]) {
                        visited[nei] = true;
                        q.offer(nei);
                    }
                }
            }
        }
        return new int[]{farthest, distance};
    }

    // For testing
    public static void main(String[] args) {
        Solution s = new Solution();
        int[][] edges1 = {{0, 1}, {0, 4}, {1, 3}, {1, 2}, {2, 5}};
        System.out.println(s.diameter(6, edges1)); // Output: 4

        int[][] edges2 = {{0, 2}, {0, 4}, {0, 3}, {3, 1}, {3, 5}, {1, 6}};
        System.out.println(s.diameter(7, edges2)); // Output: 4
    }
}



                                                                             
