PROBLEMAS:
Given two binary arrays, a1[] and a2[]. Find the length of longest common span (i, j) where j>= i such that a1[i] + a1[i+1] + .... + a1[j] =  a2[i] + a2[i+1] + ... + a2[j].

Examples:

Input: a1[] = [0, 1, 0, 0, 0, 0], a2[] = [1, 0, 1, 0, 0, 1]
Output: 4
Explanation: The longest span with same sum is from index 1 to 4 following zero based indexing.
Input: a1[] = [0, 1, 0, 1, 1, 1, 1], a2[] = [1, 1, 1, 1, 1, 0, 1]
Output: 6
Explanation: The longest span with same sum is from index 1 to 6 following zero based indexing.

SOLUTIONS:


class Solution {
    public int longestCommonSum(int[] a1, int[] a2) {
        // Code here
        int n = a1.length;
        int maxLen = 0;
        int prefixSum1 = 0, prefixSum2 = 0;

        // Map to store first occurrence of difference between prefix sums
        HashMap<Integer, Integer> diffMap = new HashMap<>();

        for (int i = 0; i < n; i++) {
            prefixSum1 += a1[i];
            prefixSum2 += a2[i];

            int currDiff = prefixSum1 - prefixSum2;

            if (currDiff == 0) {
                // If difference is 0, span is from 0 to i
                maxLen = i + 1;
            } else if (diffMap.containsKey(currDiff)) {
                // If same difference seen before, calculate span length
                int prevIndex = diffMap.get(currDiff);
                maxLen = Math.max(maxLen, i - prevIndex);
            } else {
                // Store first occurrence of this difference
                diffMap.put(currDiff, i);
            }
        }

        return maxLen;
    }
}
        
      
