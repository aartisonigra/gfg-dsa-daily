Given an integer array arr[] and an integer k (where k â‰¥ arr.length), find the smallest positive integer divisor such that the sum of the ceiling values of each element in arr[] divided by this divisor is less than or equal to k.

Examples:

Input: arr[] = [1, 2, 5, 9], k = 6
Output: 5
Explanation: 5 is the smallest divisor having sum of quotients (1 + 1 + 1 + 2 = 5) less than or equal to 6.
Input: arr[] = [1, 1, 1, 1], k = 4
Output: 1
Explanation: 1 is the smallest divisor having sum of quotients (1 + 1 + 1 + 1 = 4) less than or equal to 4.


  soltuions:
class Solution {
    public int smallestDivisor(int[] arr, int k) {
        int low = 1;
        int high = getMax(arr);
        int ans = high;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (getSum(arr, mid) <= k) {
                ans = mid;
                high = mid - 1;  // try smaller divisor
            } else {
                low = mid + 1;  // need bigger divisor
            }
        }

        return ans;
    }

    // Function to calculate max value in array
    private int getMax(int[] arr) {
        int max = arr[0];
        for (int num : arr) {
            if (num > max) max = num;
        }
        return max;
    }

    // Function to calculate sum of ceilings
    private int getSum(int[] arr, int divisor) {
        int sum = 0;
        for (int num : arr) {
            sum += (num + divisor - 1) / divisor;  // ceil without using Math.ceil
        }
        return sum;
    }
}
