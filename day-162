Given the root of a binary tree with integer values. Your task is to select a subset of nodes such that the sum of their values is maximized, with the condition that no two selected nodes are directly connected that is, if a node is included in the subset, neither its parent nor its children can be included.

Examples:

Input: root = [11, 1, 2]

Output: 11
Explanation: The maximum sum is obtained by selecting the node 11.

Input: root = [1, 2, 3, 4, N, 5, 6]

Output: 16
Explanation: The maximum sum is obtained by selecting the nodes 1, 4, 5 and 6, which are not directly connected to each other. Their total sum is 16.  


  SOLUTIONS:

import java.util.HashMap;
import java.util.Map;

class Solution {
    private Map<Node, Integer> memo = new HashMap<>();

    public int getMaxSum(Node root) {
        if (root == null) return 0;
        if (memo.containsKey(root)) return memo.get(root);

        int include = root.data;
        if (root.left != null) {
            include += getMaxSum(root.left.left);
            include += getMaxSum(root.left.right);
        }
        if (root.right != null) {
            include += getMaxSum(root.right.left);
            include += getMaxSum(root.right.right);
        }

        int exclude = getMaxSum(root.left) + getMaxSum(root.right);
        int res = Math.max(include, exclude);
        memo.put(root, res);
        return res;
    }
}
