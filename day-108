You are given a number x and array arr[]. Your task is to rearrange the elements of the array according to the absolute difference with x, i.e., an element having minimum difference comes first, and so on.
Note: If two or more elements are at equal distances arrange them in the same sequence as in the given array.

Examples:

Input: x = 7, arr[] = [10, 5, 3, 9, 2]
Output: [5, 9, 10, 3, 2]
Explanation: Sorting the numbers according to the absolute difference with 7, we have array elements as 5, 9, 10, 3, 2.
Input: x = 6, arr[] = [1, 2, 3, 4, 5]
Output: [5, 4, 3, 2, 1]
Explanation: Sorting the numbers according to the absolute difference with 6, we have array elements as 5, 4, 3, 2, 1.


SOLUTIONS;


import java.util.*;

class Solution {
    public void rearrange(int[] arr, int x) {
        // Convert int[] to Integer[] for custom comparator
        Integer[] temp = Arrays.stream(arr).boxed().toArray(Integer[]::new);

        // Stable sort using custom comparator
        Arrays.sort(temp, (a, b) -> {
            int diff1 = Math.abs(a - x);
            int diff2 = Math.abs(b - x);
            return diff1 - diff2; // smaller difference first
        });

        // Copy back to original array
        for (int i = 0; i < arr.length; i++) {
            arr[i] = temp[i];
        }
    }

    // For testing
    public static void main(String[] args) {
        Solution sol = new Solution();
        
        int[] arr1 = {10, 5, 3, 9, 2};
        sol.rearrange(arr1, 7);
        System.out.println(Arrays.toString(arr1)); // [5, 9, 10, 3, 2]
        
        int[] arr2 = {1, 2, 3, 4, 5};
        sol.rearrange(arr2, 6);
        System.out.println(Arrays.toString(arr2)); // [5, 4, 3, 2, 1]
    }
}
