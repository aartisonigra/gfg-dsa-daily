Given a row-wise sorted matrix mat[][] of size n*m, where the number of rows and columns is always odd. Return the median of the matrix.

Examples:

Input: mat[][] = [[1, 3, 5], 
                [2, 6, 9], 
                [3, 6, 9]]
Output: 5
Explanation: Sorting matrix elements gives us [1, 2, 3, 3, 5, 6, 6, 9, 9]. Hence, 5 is median.
Input: mat[][] = [[2, 4, 9],
                [3, 6, 7],
                [4, 7, 10]]
Output: 6
Explanation: Sorting matrix elements gives us [2, 3, 4, 4, 6, 7, 7, 9, 10]. Hence, 6 is median.
Input: mat = [[3], [4], [8]]
Output: 4
Explanation: Sorting matrix elements gives us [3, 4, 8]. Hence, 4 is median.

SOLUTIONS:

class Solution {
    public int median(int[][] mat) {
        int n = mat.length;      // number of rows
        int m = mat[0].length;   // number of cols
        
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;

        // Step 1: find global min and max
        for (int i = 0; i < n; i++) {
            min = Math.min(min, mat[i][0]);       // first element of each row
            max = Math.max(max, mat[i][m - 1]);   // last element of each row
        }

        int desired = (n * m + 1) / 2;  // middle position

        // Step 2: Binary Search
        while (min < max) {
            int mid = min + (max - min) / 2;
            int place = 0;

            // count elements <= mid
            for (int i = 0; i < n; i++) {
                place += countSmallerEqual(mat[i], mid);
            }

            if (place < desired)
                min = mid + 1;
            else
                max = mid;
        }
        return min;
    }

    // Helper: binary search in row to count elements <= target
    private int countSmallerEqual(int[] row, int target) {
        int l = 0, r = row.length;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (row[mid] <= target)
                l = mid + 1;
            else
                r = mid;
        }
        return l;
    }
}
