Given a Directed Acyclic Graph (DAG) with V nodes labeled from 0 to V-1, and a list of directed edges, count the total number of distinct paths from a given start node to a destination node. Each edge is represented as edges[i] = [u, v], indicating a directed edge from u to v.

Examples :

Input: edges[][] = [[0,1], [0,3], [2,0], [2,1], [1,3]], V = 4, src = 2, dest = 3
Output: 3
Explanation: There are three ways to reach at 3 from 2. These are: 2 -> 1 -> 3, 2 -> 0 -> 3 and 2 -> 0 -> 1 -> 3.
Print-all-paths-1
Input: edges[][] = [[0,1], [1,2], [1,3], [2,3]], V = 4, src = 0, dest = 3
Output: 2
Explanation: There is two way to reach at 3 from 0 that is : 0 -> 1 -> 2 -> 3 and 0 -> 1 -> 3.
Print-all-paths-2


SOLTUIONS:

class Solution {
  public:
    int dfs(vector<vector<int>>& adj, int node, int dest, vector<int>& dp) {
        if(node == dest){
            return 1;
        }
        if(dp[node] != -1){
            return dp[node];
        }
        int total_paths = 0;
        for (auto u : adj[node]) {
            total_paths += dfs(adj, u, dest, dp);
            
        }
        return dp[node] = total_paths;

    }

    int countPaths(vector<vector<int>>& edges, int V, int src, int dest) {
        int cnt = 0;
        vector<bool> visited(V, false);
        vector<vector<int>> adj(V);
        vector<int> dp(V, -1);
        //dp[i] = number of paths from node i to destination node
        // dp[i==dest] = 1
        for (auto& edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj[u].push_back(v);  // Directed edge from u to v
        }

        cnt = dfs(adj, src, dest, dp);
        return cnt;
    }
};

