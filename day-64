Given a string s consisting of only uppercase and lowercase characters. The task is to sort uppercase and lowercase letters separately such that if the ith place in the original string had an Uppercase character then it should not have a lowercase character after being sorted and vice versa.

Examples :

Input: s = "GEekS"
Output: EGekS
Explanation: Sorted form of given string with the same case of character will result in output as EGekS.
Input: s = "XWMSPQ"
Output: MPQSWX
Explanation: Since all characters are of the same case We can simply perform a sorting operation on the entire string.


  SOLTIONS:

class Solution {
    public static String caseSort(String s) {
        int n = s.length();
        char[] chars = s.toCharArray();

        // Lists to store upper and lower case letters separately
        List<Character> upper = new ArrayList<>();
        List<Character> lower = new ArrayList<>();

        // Separate characters based on their case
        for (char c : chars) {
            if (Character.isUpperCase(c)) {
                upper.add(c);
            } else {
                lower.add(c);
            }
        }

        // Sort both lists
        Collections.sort(upper);
        Collections.sort(lower);

        // Pointers for both sorted lists
        int u = 0, l = 0;

        // Build result based on original case positions
        StringBuilder result = new StringBuilder();
        for (char c : chars) {
            if (Character.isUpperCase(c)) {
                result.append(upper.get(u++));
            } else {
                result.append(lower.get(l++));
            }
        }

        return result.toString();
    }
}

